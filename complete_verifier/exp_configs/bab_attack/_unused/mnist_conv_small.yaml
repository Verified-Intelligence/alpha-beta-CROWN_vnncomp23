# OMP_NUM_THREADS=1 python robustness_verifier.py --load mnist_cnn_a_adv.model --model mnist_cnn_4layer --data MNIST --epsilon 0.3 --mode verified-acc --iteration 100 --lr_decay 0.999 --timeout 6000 --get_upper_bound --beam_dive --start 2769 --end 2770 --candidates_number 16 --split_depth 8 --batch_size 4096 --mip_multi_proc 32 --mip_dive_timeout 180 --max_dive_fix_ratio 0.6 --min_local_free_ratio 0.4
model:
  name: mnist_conv_small
  path: models/eran/mnist_conv_small_nat.pth
data:
  dataset: MNIST  # Dataset name. This is just the standard CIFAR-10 test set defined in the "load_verification_dataset()" function in utils.py
  mean: [0.1307]
  std: [0.3081]
  data_idx_file: exp_configs/bab_attack/attack_idx/mnist_conv_small/mip_unknown_idx.txt  # Also there is a list for unsafe idx.
specification:
  norm: .inf  # Linf norm (can also be 2 or 1).
  epsilon: 0.12  # epsilon=2./255.
attack:  # Currently attack is only implemented for Linf norm.
  pgd_steps: 100  # Increase for a stronger attack. A PGD attack will be used before verification to filter on non-robust data examples.
  pgd_restarts: 100  # Increase for a stronger attack.
  attack_mode: diverse_pgd
  pgd_order: before
solver:
  batch_size: 8192  # Number of subdomains to compute in parallel in beta-CROWN. Decrease if you run out of memory.
  alpha-crown:
    iteration: 100   # Number of iterations for alpha-CROWN optimization. Alpha-CROWN is used to compute all intermediate layer bounds before branch and bound starts.
    lr_alpha: 0.1    # Learning rate for alpha in alpha-CROWN. The default (0.1) is typically ok.
  beta-crown:
    lr_alpha: 0.01  # Learning rate for optimizing the alpha parameters, the default (0.01) is typically ok, but you can try to tune this parameter to get better lower bound.
    lr_beta: 0.05  # Learning rate for optimizing the beta parameters, the default (0.05) is typically ok, but you can try to tune this parameter to get better lower bound.
    lr_decay: 0.999
    iteration: 50  # Number of iterations for beta-CROWN optimization. 20 is often sufficient, 50 or 100 can also be used.
  mip:
    parallel_solvers: 8
    solver_threads: 1
bab:
  timeout: 1000  # Timeout threshold for branch and bound. Increase for verifying more points.
  max_domains: 5000000
  get_upper_bound: true  # Needed for Bab-Attack.
  attack:
    enabled: true
    beam_candidates: 32
    beam_depth: 8
    max_dive_fix_ratio: 0.3
    min_local_free_ratio: 0.6
    mip_timeout: 180
    mip_start_iteration: 2
    refined_mip_attacker: true
  branching:  # Parameters for branching heuristics.
    reduceop: max  # Reduction function for the branching heuristic scores, min or max. Using max can be better on some models.
    method: kfsb  # babsr is fast but less accurate; fsb is slow but most accurate; kfsb is usualy a balance.
    candidates: 3  # Number of candidates to consider in fsb and kfsb. More leads to slower but better branching. 3 is typically good enough.
